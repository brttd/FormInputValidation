<?php

/**
 * Class InputValidation
 */
class InputValidation extends WireData implements Module
{
    public static $validator;

    private $rules = [];

    private $stored_errors = [];
    private $stored_output = [];

    public static function getModuleInfo()
    {
        return [
            'version' => 0.1,

            'title' => 'ProcessWire Input Validation',
            'summary' => 'Validation Module, for checking POST data, etc, against a set of rules.',

            'href' => 'https://github.com/brttd/InputValidation',

            'icon' => 'check-square-o',
            'singular' => false,
            'autoload' => true
        ];
    }

    public function __construct()
    {
        if (!class_exists('Validator')) {
            require_once(wire('config')->paths->InputValidation . DIRECTORY_SEPARATOR . 'Validator.class.php');
        }

        self::$validator = new Validator();
    }

    private function validateValue($value, $rules) {
        if (is_string($rules)) {
            return self::$validator->passesRule($value, $rules);
        }

        if (!is_array($rules)) {
            return false;
        }

        foreach ($rules as $rule => $params) {
            if (is_string($rule)) {
                if (!self::$validator->passesRule($value, $rule, $params)) {
                    return false;
                }
            } else {
                if (!self::$validator->passesRule($value, $params)) {
                    return false;
                }
            }
        }

        return true;
    }

    private function valueErrors($value, $rules) {
        if (is_string($rules)) {
            $error = self::$validator->ruleError($value, $rules);

            if ($error) {
                return [$error];
            }

            return [];
        }

        if (!is_array($rules)) {
            return [];
        }

        $errors = [];

        foreach ($rules as $rule => $params) {
            if (is_string($rule)) {
                $error = self::$validator->ruleError($value, $rule, $params);
            } else {
                $error = self::$validator->ruleError($value, $params);
            }

            if ($error) {
                $errors[] = $error;
            }
        }

        return $errors;
    }

    public function setRule($field, $rule) {
        if (is_string($field)) {
            $this->rules[$field] = $rule;
        }
    }

    public function setRules($rules) {
        if (is_array($rules)) {
            $this->rules = $rules;

            return true;
        } else {
            $this->rules = [];

            return false;
        }
    }

    public function validate($input, $rules = null) {
        if (!$rules) {
            $rules = $this->rules;
        }

        $output = [];
        $validated = true;

        foreach ($rules as $field => $rule) {
            $message = "{$field} (" . $input[$field] . ")";

            $message .= json_encode($rule);

            if (!$this->validateValue($input[$field], $rule)) {
                $validated = false;
            }

            $output[$field] = $input[$field];
        }

        $this->stored_output = $output;

        if ($validated) {
            $this->stored_errors = [];

            return $output;
        } else {
            $this->stored_errors = $this->errors($input, $rules);

            return false;
        }
    }

    public function errors($input = null, $rules = null) {
        if (!$input) {
            return $this->errors;
        }

        if (!$rules) {
            $rules = $this->rules;
        }

        $errors = [];

        foreach ($rules as $field => $rule) {
            $field_errors = $this->valueErrors(
                $input[$field],
                $rule
            );

            if (count($field_errors) > 0) {
                $errors[$field] = $field_errors;
            }
        }

        return $errors;
    }

    public function hasErrors($input = null, $rules = null) {
        if ($input) {
            return count($this->errors($input, $rules)) > 0;
        }

        return count($this->stored_errors) > 0;
    }

    public function fieldErrors($field) {
        if (is_array($this->stored_errors[$field])) {
            return $this->stored_errors[$field];
        }

        return [];
    }
    public function fieldHasErrors($field) {
        if ($this->stored_errors[$field]) {
            return true;
        }

        return false;
    }

    public function hasValue($field) {
        if ($this->stored_output[$field]) {
            return true;
        }

        return false;
    }

    public function fieldValue($field) {
        if ($this->stored_output[$field]) {
            return $this->stored_output[$field];
        }

        return "";
    }
    public function outputFieldValueAttribute($field) {
        return htmlspecialchars($this->fieldValue($field), ENT_QUOTES, "UTF-8");
    }
    public function outputFieldValueHtml($field) {
        return $this->sanitizer->entities($this->fieldValue($field));
    }
}